#!/bin/sh -eu

configure_debian_vagrant() {
	cd "${0%/*}"

	#shellcheck disable=SC2039
	local basefile='debian.json' \
		isoDir=iso \
		boxDir=box \
		downloader='aria2c wget curl' \
		downloaderArgs \
		providers \
		providerSet=false \
		versions \
		versionSet=false \
		arches \
		archSet=false \
		rsyncDestination='' \
		configDir='' \
		errorMode='abort'

	get_all_providers() {
		jq --raw-output '.builders[].name' "${basefile}"
	}

	get_default_providers() {
		get_all_providers
	}

	get_all_versions() {
		find . -name 'debian[0-9]*' -maxdepth 1 | cut -c 9- | cut -f 1 -d '-' | sort -un | tr '\n' ' '
	}

	get_all_versions_pattern() {
		get_all_versions | tr ' ' '|'
	}

	get_default_versions() {
		get_all_versions | tr ' ' '\n' | tail -n 2 | tr '\n' ' '
	}

	get_all_arches() {
		find . -name 'debian[0-9]*' -maxdepth 1 | cut -f 2 -d '-' | cut -f 1 -d . | sort -u | tr '\n' ' '
	}

	get_default_arches() {
		get_all_arches
	}

	check_available() {
		#shellcheck disable=SC2039
		local tool="$1"
		printf -- 'Checking for %s...' "${tool}" >&2
		if which "${tool}" >&2; then
			printf -- '%s' "${tool}"
			return 0
		else
			printf -- 'not found\n' >&2
			return 1
		fi
	}

	check_executable_path() {
		#shellcheck disable=SC2039
		local tool="$1"
		printf -- 'Checking for %s...' "${tool##*/}" >&2
		if [ -x "${tool}" ]; then
			printf -- '%s\n' "${tool}" >&2
			return 0
		else
			printf -- 'not found\n' >&2
			return 1
		fi
	}

	first_available() {
		#shellcheck disable=SC2039
		local tool
		for tool in "$@"; do
			if ! check_available "${tool}"; then
				printf -- '%s\n' 'Trying next option' >&2
			else
				return 0
			fi
		done
	}

	check_providers() {
		#shellcheck disable=SC2039
		local provider tool toolPath
		for provider in "$@"; do
			tool=''
			toolPath=''

			case "${provider}" in
				parallels)
					tool=prlctl
				;;

				virtualbox)
					tool=VBoxManage
				;;

				vmware)
					toolPath='/Applications/VMware Fusion.app/Contents/Library/vmware-vmx'
				;;
			esac

			if ([ -n "${tool}" ] && check_available "${tool}" > /dev/null) || ([ -n "${toolPath}" ] && check_executable_path "${toolPath}" > /dev/null); then
				printf -- '%s ' "${provider}"
			fi
		done
	}

	check_versions() {
		local version baseFile supported allVersions="$(get_all_versions)"
		for version in "$@"; do
			printf -- 'Checking if "%d" is a valid version\n' "${version}" >&2

			for supported in ${allVersions}; do
				if [ "${version}" -eq "${supported}" ]; then
					printf -- '%s ' "${version}"
					break 1
				fi
			done
		done
	}

	check_arches() {
		local arch baseFile supported allArches="$(get_all_arches)"
		for arch in "$@"; do
			printf -- 'Checking if "%s" is a valid arch\n' "${arch}" >&2

			for supported in ${allArches}; do
				if [ "${arch}" = "${supported}" ]; then
					printf -- '%s ' "${arch}"
					break 1
				fi
			done
		done
	}

	get_downloader_command() {
		#shellcheck disable=SC2039
		local release="$1" url sumType sumValue

		url="$(get_json_value .iso_url "${release}.json")"
		sumType="$(get_json_value .iso_checksum_type "${release}.json" | sed 's/sha/sha-/')"
		sumValue="$(get_json_value .iso_checksum "${release}.json")"


		case "${downloader}" in
			aria2c)
				printf -- 'aria2c --auto-file-renaming=false --summary-interval 0 --optimize-concurrent-downloads --file-allocation none --max-connection-per-server 5 --console-log-level warn --dir "$$(dirname "$@")" --out "$$(basename "$@")" --checksum "%s=%s" "%s"' "${sumType}" "${sumValue}" "${url}"
		   ;;

			curl)
				printf -- 'curl --fail --location --progress-bar --output "$@" "%s"' ${url}
			;;

			wget)
				printf -- 'wget --no-verbose --progress=bar --show-progress --output-document "$@" "%s"' "${url}"
			;;
		esac
	}

	get_json_value() {
		#shellcheck disable=SC2039
		local query="${1}" releaseFile="${2}"
		jq --raw-output --slurpfile override "${releaseFile}"  ".variables * \$override[] | . as \$vars | ${query}" "${basefile}"
	}

	get_release_combinations() {
		#shellcheck disable=SC2039
		local version arch
		for version in ${versions}; do
			for arch in ${arches}; do
				printf -- 'debian%d-%s ' "${version}" "${arch}"
			done
		done
	}

#box/debian7-amd64/2.0.0/parallels.box

	get_release_names() {
		#shellcheck disable=SC2039
		local release provider name version isoName
		printf -- '' > releases.mk
		for release in $(get_release_combinations); do
			version="$(get_json_value .version "${release}.json")"
			isoName=$(get_json_value .iso_name "${release}.json")
			printf -- '%s ' "${release}"
			printf -- '%s.json: | %s/%s\n\n' "${release}" "${isoDir}" "${isoName}" >> releases.mk
		done
	}

	get_box_names() {
		#shellcheck disable=SC2039
		local release version provider
		printf -- '' > boxes.mk
		for release in $(get_release_combinations); do
			version="$(get_json_value .version "${release}.json")"
			for provider in ${providers}; do
				printf -- '%s/%s/%s/%s.box ' "${boxDir}" "${release}" "${version}" "${provider}"
				printf -- '%s/%s/%s/%s.box ' "${boxDir}" "${release}" "${version}" "${provider}" >> boxes.mk
			done
			printf -- ': %s.json \n\n' "${release}" >> boxes.mk
		done
	}

	get_description_names() {
		#shellcheck disable=SC2039
		local release version provider
		printf -- '' > descriptions.mk
		for release in $(get_release_combinations); do
			version="$(get_json_value .version "${release}.json")"
			printf -- '%s/%s/%s/version-description.md ' "${boxDir}" "${release}" "${version}"
			printf -- '%s/%s/%s/version-description.md: ' "${boxDir}" "${release}" "${version}" >> descriptions.mk
			printf -- '%s/%s/%s/release.version ' "${boxDir}" "${release}" "${version}" >> descriptions.mk

			for provider in ${providers}; do
				printf -- '%s/%s/%s/%s.version ' "${boxDir}" "${release}" "${version}" "${provider}" >> descriptions.mk
			done
			printf -- '\n\n' >> descriptions.mk

			printf -- '%s/%s/%s/release.version: %s.json\n' "${boxDir}" "${release}" "${version}" "${release}" >> descriptions.mk
			printf -- '\tmkdir -p "$(@D)"\n' >> descriptions.mk
			printf -- '\tprintf -- "%%s\\n" "%s" "- BundleSites Infra %s" > "$@"\n' "$(get_json_value .version_description "${release}.json")" "$(cat "${configDir}/configs/_all/etc/bundlesites.version")"  >> descriptions.mk
			printf -- '\n'  >> descriptions.mk

		done
	}

	get_iso_names() {
		#shellcheck disable=SC2039
		local release name
		printf -- '' > isos.mk
		for release in $(get_release_combinations); do
			name=$(get_json_value .iso_name "${release}.json")
			printf -- '%s/%s ' "${isoDir}" "${name}"
			printf -- '%s/%s:\n\t%s\n\n' "${isoDir}" "${name}" "$(get_downloader_command "${release}")" >> isos.mk
		done
	}

	if [ -f ./configure.options ]; then
		. ./configure.options
	fi

	while [ $# -gt 0 ]; do
		case "$1" in
			--base-file)
				basefile="${2}"
				shift 2
			;;

			--downloader)
				downloader="$2"
				shift 2
			;;

			--config-dir)
				configDir="$2"
				shift 2
			;;

			--on-error)
				errorMode="${2:-abort}"
				shift 2
			;;

			--provider)
				if [ ${providerSet} = false ]; then
					providers=''
					providerSet=true
				fi
				providers="${providers:-}${2} "
				shift 2
			;;

			--providers)
				providers="$2"
				shift 2
			;;

			--version)
				if [ ${versionSet} = false ]; then
					versions=''
					versionSet=true
				fi
				versions="${versions:-}${2} "
				shift 2
			;;

			--versions)
				versions="$2"
				shift 2
			;;

			--arch)
				if [ ${archSet} = false ]; then
					arches=''
					archSet=true
				fi
				arches="${arches:-}${2} "
				shift 2
			;;

			--arches)
				arches="${2}"
				shift 2
			;;

			--iso-dir)
				isoDir="${2}"
				shift 2
			;;

			--box-dir)
				boxDir="${2}"
				shift 2
			;;

			--)
				shift
				break
			;;

			*)
				break
			;;
		esac
	done

	downloader="$(first_available ${downloader})"
	if [ -z "${downloader}" ]; then
		printf -- '%s\n' 'No downloader available' >&2
		return 1
	fi

	providers="$(check_providers ${providers:-$(get_default_providers)})"
	if [ -z "${providers}" ]; then
		printf -- '%s\n' 'No providers available' >&2
		return 1
	fi

	versions="$(check_versions ${versions:-$(get_default_versions)})"
	if [ -z "${versions}" ]; then
		printf -- '%s\n' 'No versions available' >&2
		return 1
	fi

	arches="$(check_arches ${arches:-$(get_default_arches)})"
	if [ -z "${arches}" ]; then
		printf -- '%s\n' 'No arches available' >&2
		return 1
	fi

	printf -- 'Using downloader: %s\n' "${downloader}"
	printf -- 'Using providers: %s\n' "${providers}"
	printf -- 'Building versions: %s\n' "${versions}"
	printf -- 'Building arches: %s\n' "${arches}"

	cat <<-EOT > ./configure.options
		downloader='${downloader}'
		providers='${providers}'
		versions='${versions}'
		arches='${arches}'
		basefile='${basefile}'
		isoDir='${isoDir}'
		boxDir='${boxDir}'
		configDir='${configDir}'
		errorMode='${errorMode}'
	EOT

	sed \
		-e "s#_BASE_FILE_#${basefile}#" \
		-e "s#_RELEASE_NAMES_#$(get_release_names)#" \
		-e "s#_BOX_NAMES_#$(get_box_names)#" \
		-e "s#_BOX_DIR_#${boxDir}#" \
		-e "s#_ISO_NAMES_#$(get_iso_names)#" \
		-e "s#_ISO_DIR_#${isoDir}#" \
		-e "s#_CONFIG_DIR_#${configDir}#" \
		-e "s#_ERROR_MODE_#${errorMode}#" \
		-e "s#_DESCRIPTION_NAMES_#$(get_description_names)#" \
		-e "s#_PROVIDER_NAMES_#${providers}#" \
		Makefile.in > Makefile
}

configure_debian_vagrant "$@"
